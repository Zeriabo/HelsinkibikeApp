import {
  createAsyncThunk,
  createSlice,
  current,
  PayloadAction,
} from "@reduxjs/toolkit";
import logger from "redux-logger";
import { useGetAsematQuery } from "../api/AsemaApi";

const initialState = {
  asemat: {},
  status: "idle",
};
var untouch = [];

export const asematSlice = createSlice({
  name: "asemat",
  initialState: initialState,
  reducers: {
    addAsema(state, action) {
      state.asemat.push(action.payload);
    },
    loadAsemat(state, action) {
      state.asemat = action.payload;
    },
    resetfilterAsemat(state) {
      state.asemat = untouch;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProductDesc = (state) => state.asemat;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const { addAsema, loadAsemat, resetfilterAsemat } = asematSlice.actions;

export default asematSlice.reducer;
